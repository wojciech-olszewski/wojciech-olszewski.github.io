{"version":3,"sources":["vendor/ember-cli/app-prefix.js","sudoku/app.js","sudoku/constraints/cannot-have-duplicated-values.js","sudoku/constraints/result.js","sudoku/constraints/should-have-all-values.js","sudoku/controllers/application.js","sudoku/controllers/game/start.js","sudoku/initializers/app-version.js","sudoku/initializers/board-factory-service.js","sudoku/initializers/board-initializer-service.js","sudoku/initializers/board-validator-service.js","sudoku/initializers/export-application-global.js","sudoku/models/block.js","sudoku/models/board.js","sudoku/models/cell.js","sudoku/router.js","sudoku/routes/application.js","sudoku/routes/game/end.js","sudoku/routes/game/index.js","sudoku/routes/game/start.js","sudoku/services/board-factory.js","sudoku/services/board-initializer.js","sudoku/services/board-validator.js","sudoku/templates/application.js","sudoku/templates/cell.js","sudoku/templates/game/end.js","sudoku/templates/game/index.js","sudoku/templates/game/start.js","sudoku/tests/app.jshint.js","sudoku/tests/constraints/cannot-have-duplicated-values.jshint.js","sudoku/tests/constraints/result.jshint.js","sudoku/tests/constraints/should-have-all-values.jshint.js","sudoku/tests/controllers/application.jshint.js","sudoku/tests/controllers/game/start.jshint.js","sudoku/tests/helpers/resolver.js","sudoku/tests/helpers/resolver.jshint.js","sudoku/tests/helpers/start-app.js","sudoku/tests/helpers/start-app.jshint.js","sudoku/tests/initializers/board-factory-service.jshint.js","sudoku/tests/initializers/board-initializer-service.jshint.js","sudoku/tests/initializers/board-validator-service.jshint.js","sudoku/tests/models/block.jshint.js","sudoku/tests/models/board.jshint.js","sudoku/tests/models/cell.jshint.js","sudoku/tests/router.jshint.js","sudoku/tests/routes/application.jshint.js","sudoku/tests/routes/game/end.jshint.js","sudoku/tests/routes/game/index.jshint.js","sudoku/tests/routes/game/start.jshint.js","sudoku/tests/services/board-factory.jshint.js","sudoku/tests/services/board-initializer.jshint.js","sudoku/tests/services/board-validator.jshint.js","sudoku/tests/test-helper.js","sudoku/tests/test-helper.jshint.js","sudoku/tests/unit/constraints/cannot-have-duplicated-values-test.js","sudoku/tests/unit/constraints/cannot-have-duplicated-values-test.jshint.js","sudoku/tests/unit/constraints/should-have-all-values-test.js","sudoku/tests/unit/constraints/should-have-all-values-test.jshint.js","sudoku/tests/unit/controllers/game/start-test.js","sudoku/tests/unit/controllers/game/start-test.jshint.js","sudoku/tests/unit/models/board-test.js","sudoku/tests/unit/models/board-test.jshint.js","sudoku/tests/unit/models/cell-test.js","sudoku/tests/unit/models/cell-test.jshint.js","sudoku/tests/unit/routes/application-test.js","sudoku/tests/unit/routes/application-test.jshint.js","sudoku/tests/unit/routes/game/end-test.js","sudoku/tests/unit/routes/game/end-test.jshint.js","sudoku/tests/unit/routes/game/index-test.js","sudoku/tests/unit/routes/game/index-test.jshint.js","sudoku/tests/unit/routes/game/start-test.js","sudoku/tests/unit/routes/game/start-test.jshint.js","sudoku/tests/unit/services/board-factory-test.js","sudoku/tests/unit/services/board-factory-test.jshint.js","sudoku/tests/unit/services/board-validator-test.js","sudoku/tests/unit/services/board-validator-test.jshint.js","sudoku/tests/views/cell.jshint.js","sudoku/views/cell.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('sudoku/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'sudoku/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  var App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('sudoku/constraints/cannot-have-duplicated-values', ['exports', 'ember', 'sudoku/constraints/result'], function (exports, Ember, ConstraintResult) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Object.extend({\n\n    cells: null,\n\n    validate: function validate() {\n      var compactValues = this.get(\"cells\").map(function (cell) {\n        return cell.get(\"number\");\n      }).compact();\n\n      var compactCells = this.get(\"cells\").filter(function (cell) {\n        return compactValues.contains(cell.get(\"number\"));\n      });\n\n      var isDuplicate = function isDuplicate(cell) {\n        var sameValueCells = compactCells.filter(function (innerCell) {\n          return cell.get(\"number\") === innerCell.get(\"number\");\n        });\n\n        return sameValueCells.length > 1;\n      };\n\n      var duplicates = this.get(\"cells\").filter(isDuplicate);\n\n      return ConstraintResult['default'].create({\n        valid: 0 === duplicates.length,\n        invalidCells: duplicates\n      });\n    }\n\n  });\n\n});","define('sudoku/constraints/result', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Object.extend({\n\n    valid: false,\n    invalidCells: null,\n\n    init: function init() {\n      if (null === this.get(\"invalidCells\")) {\n        this.set(\"invalidCells\", []);\n      }\n    }\n\n  });\n\n});","define('sudoku/constraints/should-have-all-values', ['exports', 'ember', 'sudoku/constraints/result'], function (exports, Ember, ConstraintResult) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Object.extend({\n\n    allValues: [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    cells: null,\n\n    validate: function validate() {\n      var values = this.get(\"cells\").map(function (cell) {\n        return cell.get(\"number\");\n      }).compact();\n\n      return ConstraintResult['default'].create({\n        valid: this.get(\"allValues\").every(function (value) {\n          return values.contains(value);\n        })\n      });\n    }\n\n  });\n\n});","define('sudoku/controllers/application', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  var ARROWS_MAP = {\n    ARROW_LEFT: 37,\n    ARROW_UP: 38,\n    ARROW_RIGHT: 39,\n    ARROW_DOWN: 40\n  };\n\n  exports['default'] = Ember['default'].Controller.extend({\n\n    board: null,\n\n    init: function init() {\n      this._super();\n      this.set(\"board\", this.get(\"boardFactoryService\").createBoard());\n\n      //    console.log(this.board);\n    },\n\n    actions: {\n      mouseEnter: function mouseEnter(cell) {},\n\n      mouseLeave: function mouseLeave(cell) {},\n\n      click: function click(cell) {\n        this.activateCell(cell);\n      },\n\n      arrowPress: function arrowPress(cell, event) {\n        this.moveCell(cell, event.which);\n      },\n\n      deletePress: function deletePress(cell) {\n        cell.set(\"number\", null);\n      },\n\n      numberPress: function numberPress(cell, number) {\n        cell.set(\"number\", number);\n        this.validateBoard();\n      }\n    },\n\n    activateCell: function activateCell(cell) {\n      if (cell.get(\"isEnabled\")) {\n        this.get(\"board.cells\").setEach(\"isActive\", false);\n        cell.set(\"isActive\", true);\n      }\n    },\n\n    moveCell: function moveCell(cell, direction) {\n      var newActiveCell = null;\n\n      switch (direction) {\n        case ARROWS_MAP.ARROW_LEFT:\n          newActiveCell = this.get(\"board\").cellLeftFor(cell);\n          break;\n        case ARROWS_MAP.ARROW_UP:\n          newActiveCell = this.get(\"board\").cellUpFor(cell);\n          break;\n        case ARROWS_MAP.ARROW_RIGHT:\n          newActiveCell = this.get(\"board\").cellRightFor(cell);\n          break;\n        case ARROWS_MAP.ARROW_DOWN:\n          newActiveCell = this.get(\"board\").cellDownFor(cell);\n          break;\n      }\n\n      if (undefined !== newActiveCell) {\n        this.activateCell(newActiveCell);\n      }\n    },\n\n    validateBoard: function validateBoard() {\n      var result = this.get(\"boardValidatorService\").validate(this.get(\"board\"));\n\n      if (!result.get(\"valid\")) {\n        this.get(\"board.cells\").setEach(\"isValid\", true);\n        result.get(\"invalidCells\").forEach(function (cell) {\n          cell.set(\"isValid\", false);\n        });\n      }\n    }\n\n  });\n\n  //      this.get('board').rowCellsFor(cell).setEach('isInvalid', true);\n  //      this.get('board').columnCellsFor(cell).setEach('isInvalid', true);\n\n  //      this.get('board').rowCellsFor(cell).setEach('isInvalid', false);\n  //      this.get('board').columnCellsFor(cell).setEach('isInvalid', false);\n\n});","define('sudoku/controllers/game/start', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  var ARROWS_MAP = {\n    ARROW_LEFT: 37,\n    ARROW_UP: 38,\n    ARROW_RIGHT: 39,\n    ARROW_DOWN: 40\n  };\n\n  exports['default'] = Ember['default'].Controller.extend({\n\n    board: null,\n\n    init: function init() {\n      this._super();\n      this.set(\"board\", this.get(\"boardFactoryService\").createBoard());\n\n      //    console.log(this.board);\n    },\n\n    actions: {\n      mouseEnter: function mouseEnter(cell) {},\n\n      mouseLeave: function mouseLeave(cell) {},\n\n      click: function click(cell) {\n        this.activateCell(cell);\n      },\n\n      arrowPress: function arrowPress(cell, event) {\n        this.moveCell(cell, event.which);\n      },\n\n      deletePress: function deletePress(cell) {\n        cell.set(\"number\", null);\n      },\n\n      numberPress: function numberPress(cell, number) {\n        cell.set(\"number\", number);\n        this.validateBoard();\n      }\n    },\n\n    activateCell: function activateCell(cell) {\n      if (cell.get(\"isEnabled\")) {\n        this.get(\"board.cells\").setEach(\"isActive\", false);\n        cell.set(\"isActive\", true);\n      }\n    },\n\n    moveCell: function moveCell(cell, direction) {\n      var newActiveCell = null;\n\n      switch (direction) {\n        case ARROWS_MAP.ARROW_LEFT:\n          newActiveCell = this.get(\"board\").cellLeftFor(cell);\n          break;\n        case ARROWS_MAP.ARROW_UP:\n          newActiveCell = this.get(\"board\").cellUpFor(cell);\n          break;\n        case ARROWS_MAP.ARROW_RIGHT:\n          newActiveCell = this.get(\"board\").cellRightFor(cell);\n          break;\n        case ARROWS_MAP.ARROW_DOWN:\n          newActiveCell = this.get(\"board\").cellDownFor(cell);\n          break;\n      }\n\n      if (undefined !== newActiveCell) {\n        this.activateCell(newActiveCell);\n      }\n    },\n\n    validateBoard: function validateBoard() {\n      var result = this.get(\"boardValidatorService\").validate(this.get(\"board\"));\n\n      if (!result.get(\"valid\")) {\n        this.get(\"board.cells\").setEach(\"isValid\", true);\n        result.get(\"invalidCells\").forEach(function (cell) {\n          cell.set(\"isValid\", false);\n        });\n      }\n    }\n\n  });\n\n  //      this.get('board').rowCellsFor(cell).setEach('isInvalid', true);\n  //      this.get('board').columnCellsFor(cell).setEach('isInvalid', true);\n\n  //      this.get('board').rowCellsFor(cell).setEach('isInvalid', false);\n  //      this.get('board').columnCellsFor(cell).setEach('isInvalid', false);\n\n});","define('sudoku/initializers/app-version', ['exports', 'sudoku/config/environment', 'ember'], function (exports, config, Ember) {\n\n  'use strict';\n\n  var classify = Ember['default'].String.classify;\n\n  exports['default'] = {\n    name: \"App Version\",\n    initialize: function initialize(container, application) {\n      var appName = classify(application.toString());\n      Ember['default'].libraries.register(appName, config['default'].APP.version);\n    }\n  };\n\n});","define('sudoku/initializers/board-factory-service', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    application.inject(\"controller\", \"boardFactoryService\", \"service:board-factory\");\n  }\n\n  exports['default'] = {\n    name: \"board-factory-service\",\n    initialize: initialize\n  };\n\n});","define('sudoku/initializers/board-initializer-service', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    application.inject(\"service:board-factory\", \"boardInitializerService\", \"service:board-initializer\");\n  }\n\n  exports['default'] = {\n    name: \"board-initializer-service\",\n    initialize: initialize\n  };\n\n});","define('sudoku/initializers/board-validator-service', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    application.inject(\"controller\", \"boardValidatorService\", \"service:board-validator\");\n  }\n\n  exports['default'] = {\n    name: \"board-validator-service\",\n    initialize: initialize\n  };\n\n});","define('sudoku/initializers/export-application-global', ['exports', 'ember', 'sudoku/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);\n\n    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {\n      window[classifiedName] = application;\n    }\n  }\n\n  ;\n\n  exports['default'] = {\n    name: \"export-application-global\",\n\n    initialize: initialize\n  };\n\n});","define('sudoku/models/block', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Object.extend({\n\n    x1: null,\n    x2: null,\n\n    y1: null,\n    y2: null,\n\n    cells: null,\n\n    contains: function contains(cell) {\n      return this.get(\"cells\").find(function (blockCell) {\n        return blockCell.isSame(cell);\n      });\n    }\n\n  });\n\n});","define('sudoku/models/board', ['exports', 'ember', 'sudoku/models/cell', 'sudoku/models/block'], function (exports, Ember, Cell, Block) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Object.extend({\n\n    cells: null,\n    blocks: null,\n    constraints: null,\n\n    init: function init() {\n      var board = this;\n      var x;\n      var y;\n\n      board._super();\n      board.set(\"cells\", []);\n      board.set(\"blocks\", []);\n      board.set(\"constraints\", []);\n\n      for (x = 0; x < 9; x++) {\n        for (y = 0; y < 9; y++) {\n          board.get(\"cells\").addObject(Cell['default'].create({\n            x: x,\n            y: y\n          }));\n        }\n      }\n\n      var cellsForBlockFilter = function cellsForBlockFilter(cell) {\n        return cell.get(\"x\") >= x1 && cell.get(\"x\") <= x2 && cell.get(\"y\") >= y1 && cell.get(\"y\") <= y2;\n      };\n\n      for (x = 0; x < 9; x += 3) {\n        for (y = 0; y < 9; y += 3) {\n          var x1 = x;\n          var x2 = x + 2;\n          var y1 = y;\n          var y2 = y + 2;\n\n          this.get(\"blocks\").addObject(Block['default'].create({\n            x1: x1,\n            x2: x2,\n            y1: y1,\n            y2: y2,\n            cells: board.get(\"cells\").filter(cellsForBlockFilter)\n          }));\n        }\n      }\n    },\n\n    rows: (function () {\n      var rows = [];\n      for (var x = 0; x < 9; x++) {\n        rows.addObject(this.rowCellsFor(this.cellAt(x, x)));\n      }\n\n      return rows;\n    }).property(),\n\n    columns: (function () {\n      var columns = [];\n      for (var y = 0; y < 9; y++) {\n        columns.addObject(this.columnCellsFor(this.cellAt(y, y)));\n      }\n\n      return columns;\n    }).property(),\n\n    blockCellsFor: function blockCellsFor(relativeCell) {\n      var block = this.get(\"blocks\").find(function (block) {\n        return block.contains(relativeCell);\n      });\n\n      if (undefined === block) {\n        return [];\n      }\n\n      return block.cells;\n    },\n\n    rowCellsFor: function rowCellsFor(relativeCell) {\n      return this.get(\"cells\").filter(function (cell) {\n        return cell.isInRowWith(relativeCell);\n      });\n    },\n\n    columnCellsFor: function columnCellsFor(relativeCell) {\n      return this.get(\"cells\").filter(function (cell) {\n        return cell.isInColumnWith(relativeCell);\n      });\n    },\n\n    cellLeftFor: function cellLeftFor(relativeCell) {\n      return this.cellAt(relativeCell.get(\"x\"), relativeCell.get(\"y\") - 1);\n    },\n\n    cellUpFor: function cellUpFor(relativeCell) {\n      return this.cellAt(relativeCell.get(\"x\") - 1, relativeCell.get(\"y\"));\n    },\n\n    cellRightFor: function cellRightFor(relativeCell) {\n      return this.cellAt(relativeCell.get(\"x\"), relativeCell.get(\"y\") + 1);\n    },\n\n    cellDownFor: function cellDownFor(relativeCell) {\n      return this.cellAt(relativeCell.get(\"x\") + 1, relativeCell.get(\"y\"));\n    },\n\n    cellAt: function cellAt(x, y) {\n      return this.get(\"cells\").find(function (cell) {\n        return cell.get(\"x\") === x && cell.get(\"y\") === y;\n      });\n    }\n\n  });\n\n});","define('sudoku/models/cell', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Object.extend({\n\n    number: null,\n    x: null,\n    y: null,\n    isActive: false,\n    isValid: true,\n    isEnabled: false,\n\n    isSame: function isSame(cell) {\n      return cell.get(\"x\") === this.get(\"x\") && cell.get(\"y\") === this.get(\"y\");\n    },\n\n    isInRowWith: function isInRowWith(cell) {\n      return cell.get(\"x\") === this.get(\"x\");\n    },\n\n    isInColumnWith: function isInColumnWith(cell) {\n      return cell.get(\"y\") === this.get(\"y\");\n    }\n\n  });\n\n});","define('sudoku/router', ['exports', 'ember', 'sudoku/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  Router.map(function () {\n    this.route(\"game\", function () {\n      this.route(\"index\", { path: \"/\" });\n      this.route(\"start\", { path: \"/start\" });\n      this.route(\"end\", { path: \"/end\" });\n    });\n  });\n\n  exports['default'] = Router;\n\n});","define('sudoku/routes/application', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    beforeModel: function beforeModel() {\n      this.transitionTo(\"game.index\");\n    }\n  });\n\n});","define('sudoku/routes/game/end', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Route.extend({});\n\n});","define('sudoku/routes/game/index', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Route.extend({});\n\n});","define('sudoku/routes/game/start', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Route.extend({});\n\n});","define('sudoku/services/board-factory', ['exports', 'ember', 'sudoku/models/board', 'sudoku/constraints/cannot-have-duplicated-values', 'sudoku/constraints/should-have-all-values'], function (exports, Ember, Board, CannotHaveDuplicatedValuesConstraint, ShouldHaveAllValuesConstraint) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Object.extend({\n\n    createBoard: function createBoard() {\n      return this.applyConstraints(this.initialize(Board['default'].create()));\n    },\n\n    applyConstraints: function applyConstraints(board) {\n      var applyConstraintsForCells = function applyConstraintsForCells(cells) {\n        board.get(\"constraints\").pushObjects([CannotHaveDuplicatedValuesConstraint['default'].create({ cells: cells }), ShouldHaveAllValuesConstraint['default'].create({ cells: cells })]);\n      };\n\n      board.get(\"blocks\").forEach(function (block) {\n        applyConstraintsForCells(block.get(\"cells\"));\n      });\n\n      board.get(\"rows\").forEach(function (row) {\n        applyConstraintsForCells(row);\n      });\n\n      board.get(\"columns\").forEach(function (column) {\n        applyConstraintsForCells(column);\n      });\n\n      return board;\n    },\n\n    initialize: function initialize(board) {\n      return this.get(\"boardInitializerService\").initialize(board);\n    }\n\n  });\n\n});","define('sudoku/services/board-initializer', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Object.extend({\n\n    initialize: function initialize(board) {\n      var numbers = [[7, 1, 8, 5, 4, 3, 6, 2, 9], [6, 9, 3, 2, 1, 8, 5, 7, 4], [5, 4, 2, 9, 7, 6, 3, 1, 8], [4, 3, 5, 7, 9, 1, 8, 6, 2], [1, 6, 7, 8, 3, 2, 4, 9, 5], [2, 8, 9, 4, 6, 5, 7, 3, 1], [8, 5, 1, 6, 2, 7, 9, 4, 3], [9, 2, 6, 3, 5, 4, 1, 8, 7], [3, 7, 4, 1, 8, 9, 2, 5, 6]];\n\n      numbers.forEach(function (row, x) {\n        row.forEach(function (number, y) {\n          board.cellAt(x, y).set(\"number\", number);\n        });\n      });\n\n      var getRandom = function getRandom(min, max) {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n      };\n\n      var getRandomCell = function getRandomCell(board) {\n        return board.cellAt(getRandom(0, 8), getRandom(0, 8));\n      };\n\n      var cellsToDisable = getRandom(40, 60);\n      var cell;\n      while (cellsToDisable > 0) {\n        cell = getRandomCell(board);\n\n        if (null !== cell.get(\"number\")) {\n          cell.set(\"number\", null);\n          cellsToDisable--;\n        }\n      }\n\n      board.get(\"cells\").forEach(function (cell) {\n        if (null === cell.get(\"number\")) {\n          cell.set(\"isEnabled\", true);\n        }\n      });\n\n      return board;\n    }\n\n  });\n\n});","define('sudoku/services/board-validator', ['exports', 'ember', 'sudoku/constraints/result'], function (exports, Ember, ConstraintResult) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Object.extend({\n\n    validate: function validate(board) {\n      var results = board.get(\"constraints\").map(function (constraint) {\n        return constraint.validate();\n      });\n\n      return ConstraintResult['default'].create({\n        valid: results.every(function (result) {\n          return result.get(\"valid\");\n        }),\n        invalidCells: results\n        // here we have to reduce result object to concatenated invalidCells array\n        .reduce(function (reduce, result) {\n          return reduce.concat(result.get(\"invalidCells\"));\n        }, [])\n        // here we have to reduce duplicated objects\n        .reduce(function (reduce, cell) {\n          if (undefined === reduce.find(function (uniqCell) {\n            return uniqCell.isSame(cell);\n          })) {\n            reduce.addObject(cell);\n          }\n\n          return reduce;\n        }, [])\n      });\n    }\n\n  });\n\n});","define('sudoku/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('sudoku/templates/cell', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"point\");\n        var el2 = dom.createTextNode(\"\\n    x = \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\", y = \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"number\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var morph0 = dom.createMorphAt(element0,0,1);\n        var morph1 = dom.createMorphAt(element0,1,2);\n        var morph2 = dom.createMorphAt(dom.childAt(fragment, [2]),0,1);\n        content(env, morph0, context, \"cell.x\");\n        content(env, morph1, context, \"cell.y\");\n        content(env, morph2, context, \"cell.number\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('sudoku/templates/game/end', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createTextNode(\"index\");\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createTextNode(\"start\");\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createTextNode(\"end\");\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"end\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[4]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        var morph1 = dom.createMorphAt(fragment,1,2,contextualElement);\n        var morph2 = dom.createMorphAt(fragment,2,3,contextualElement);\n        var morph3 = dom.createMorphAt(fragment,3,4,contextualElement);\n        content(env, morph0, context, \"outlet\");\n        block(env, morph1, context, \"link-to\", [\"game.index\"], {}, child0, null);\n        block(env, morph2, context, \"link-to\", [\"game.start\"], {}, child1, null);\n        block(env, morph3, context, \"link-to\", [\"game.end\"], {}, child2, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('sudoku/templates/game/index', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createElement(\"button\");\n          dom.setAttribute(el0,\"class\",\"game-start\");\n          var el1 = dom.createTextNode(\"start\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        block(env, morph0, context, \"link-to\", [\"game.start\"], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('sudoku/templates/game/start', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"                \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            inline(env, morph0, context, \"view\", [\"cell\"], {\"cell\": get(env, context, \"cell\")});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"block\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"        \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,1);\n          block(env, morph0, context, \"each\", [get(env, context, \"block.cells\")], {\"keyword\": \"cell\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createTextNode(\"index\");\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createTextNode(\"start\");\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child3 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createTextNode(\"end\");\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"board\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[4]); }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),0,-1);\n        var morph1 = dom.createMorphAt(fragment,1,2,contextualElement);\n        var morph2 = dom.createMorphAt(fragment,2,3,contextualElement);\n        var morph3 = dom.createMorphAt(fragment,3,4,contextualElement);\n        block(env, morph0, context, \"each\", [get(env, context, \"board.blocks\")], {\"keyword\": \"block\"}, child0, null);\n        block(env, morph1, context, \"link-to\", [\"game.index\"], {}, child1, null);\n        block(env, morph2, context, \"link-to\", [\"game.start\"], {}, child2, null);\n        block(env, morph3, context, \"link-to\", [\"game.end\"], {}, child3, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('sudoku/tests/app.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - app.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'app.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/constraints/cannot-have-duplicated-values.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - constraints/cannot-have-duplicated-values.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'constraints/cannot-have-duplicated-values.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/constraints/result.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - constraints/result.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'constraints/result.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/constraints/should-have-all-values.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - constraints/should-have-all-values.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'constraints/should-have-all-values.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/controllers/application.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - controllers/application.js', function(){\n  it('should pass jshint', function() { \n    expect(false, 'controllers/application.js should pass jshint.\\ncontrollers/application.js: line 22, col 26, \\'cell\\' is defined but never used.\\ncontrollers/application.js: line 27, col 26, \\'cell\\' is defined but never used.\\n\\n2 errors').to.be.ok; \n  })});\n\n});","define('sudoku/tests/controllers/game/start.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - controllers/game/start.js', function(){\n  it('should pass jshint', function() { \n    expect(false, 'controllers/game/start.js should pass jshint.\\ncontrollers/game/start.js: line 22, col 26, \\'cell\\' is defined but never used.\\ncontrollers/game/start.js: line 27, col 26, \\'cell\\' is defined but never used.\\n\\n2 errors').to.be.ok; \n  })});\n\n});","define('sudoku/tests/helpers/resolver', ['exports', 'ember/resolver', 'sudoku/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('sudoku/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - helpers/resolver.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'helpers/resolver.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/helpers/start-app', ['exports', 'ember', 'sudoku/app', 'sudoku/router', 'sudoku/config/environment'], function (exports, Ember, Application, Router, config) {\n\n  'use strict';\n\n\n\n  exports['default'] = startApp;\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n\n});","define('sudoku/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - helpers/start-app.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'helpers/start-app.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/initializers/board-factory-service.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - initializers/board-factory-service.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'initializers/board-factory-service.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/initializers/board-initializer-service.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - initializers/board-initializer-service.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'initializers/board-initializer-service.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/initializers/board-validator-service.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - initializers/board-validator-service.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'initializers/board-validator-service.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/models/block.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - models/block.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'models/block.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/models/board.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - models/board.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'models/board.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/models/cell.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - models/cell.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'models/cell.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/router.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - router.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'router.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/routes/application.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - routes/application.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'routes/application.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/routes/game/end.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - routes/game/end.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'routes/game/end.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/routes/game/index.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - routes/game/index.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'routes/game/index.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/routes/game/start.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - routes/game/start.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'routes/game/start.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/services/board-factory.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - services/board-factory.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'services/board-factory.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/services/board-initializer.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - services/board-initializer.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'services/board-initializer.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/services/board-validator.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - services/board-validator.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'services/board-validator.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/test-helper', ['sudoku/tests/helpers/resolver', 'ember-mocha'], function (resolver, ember_mocha) {\n\n\t'use strict';\n\n\tember_mocha.setResolver(resolver['default']);\n\n});","define('sudoku/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - test-helper.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'test-helper.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/unit/constraints/cannot-have-duplicated-values-test', ['chai', 'mocha', 'sudoku/constraints/cannot-have-duplicated-values', 'sudoku/models/cell'], function (chai, mocha, CannotHaveDuplicatedValuesConstraint, Cell) {\n\n  'use strict';\n\n  /* jshint expr:true */\n  mocha.describe(\"CannotHaveDuplicatedValuesConstraint\", function () {\n    mocha.it(\"CannotHaveDuplicatedValuesConstraint.validate() pass for nulls\", function () {\n      var constraint = CannotHaveDuplicatedValuesConstraint['default'].create({\n        cells: [Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null })]\n      });\n\n      var result = constraint.validate();\n      chai.assert.isObject(result);\n      chai.expect(result.get(\"valid\")).to.be[\"true\"];\n      chai.expect(result.get(\"invalidCells\").length).to.be.eq(0);\n    });\n\n    mocha.it(\"CannotHaveDuplicatedValuesConstraint.validate() pass for non duplicated values & nulls\", function () {\n      var constraint = CannotHaveDuplicatedValuesConstraint['default'].create({\n        cells: [Cell['default'].create({ number: 1 }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null })]\n      });\n\n      var result = constraint.validate();\n      chai.assert.isObject(result);\n      chai.expect(result.get(\"valid\")).to.be[\"true\"];\n      chai.expect(result.get(\"invalidCells\").length).to.be.eq(0);\n    });\n\n    mocha.it(\"CannotHaveDuplicatedValuesConstraint.validate() pass for non duplicated values\", function () {\n      var constraint = CannotHaveDuplicatedValuesConstraint['default'].create({\n        cells: [Cell['default'].create({ number: 1 }), Cell['default'].create({ number: 2 }), Cell['default'].create({ number: 3 }), Cell['default'].create({ number: 4 }), Cell['default'].create({ number: 5 }), Cell['default'].create({ number: 6 }), Cell['default'].create({ number: 7 }), Cell['default'].create({ number: 8 }), Cell['default'].create({ number: 9 })]\n      });\n\n      var result = constraint.validate();\n      chai.assert.isObject(result);\n      chai.expect(result.get(\"valid\")).to.be[\"true\"];\n      chai.expect(result.get(\"invalidCells\").length).to.be.eq(0);\n    });\n\n    mocha.it(\"CannotHaveDuplicatedValuesConstraint.validate() fails for duplicated values & nulls\", function () {\n      var duplicatedNumber = 1;\n      var constraint = CannotHaveDuplicatedValuesConstraint['default'].create({\n        cells: [Cell['default'].create({ number: duplicatedNumber }), Cell['default'].create({ number: duplicatedNumber }), Cell['default'].create({ number: duplicatedNumber }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null })]\n      });\n\n      var result = constraint.validate();\n      chai.assert.isObject(result);\n      chai.expect(result.get(\"valid\")).to.be[\"false\"];\n      chai.expect(result.get(\"invalidCells\").length).to.be.eq(3);\n      chai.expect(result.get(\"invalidCells.firstObject.number\")).to.be.eq(duplicatedNumber);\n    });\n  });\n\n});","define('sudoku/tests/unit/constraints/cannot-have-duplicated-values-test.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - unit/constraints/cannot-have-duplicated-values-test.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'unit/constraints/cannot-have-duplicated-values-test.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/unit/constraints/should-have-all-values-test', ['chai', 'mocha', 'sudoku/constraints/should-have-all-values', 'sudoku/models/cell'], function (chai, mocha, ShouldHaveAllValuesConstraint, Cell) {\n\n  'use strict';\n\n  /* jshint expr:true */\n  mocha.describe(\"ShouldHaveAllValuesConstraint\", function () {\n    mocha.it(\"ShouldHaveAllValuesConstraint.validate() fails for nulls\", function () {\n      var constraint = ShouldHaveAllValuesConstraint['default'].create({\n        cells: [Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null })]\n      });\n\n      var result = constraint.validate();\n      chai.assert.isObject(result);\n      chai.expect(result.get(\"valid\")).to.be[\"false\"];\n    });\n\n    mocha.it(\"ShouldHaveAllValuesConstraint.validate() fails for duplicated values\", function () {\n      var constraint = ShouldHaveAllValuesConstraint['default'].create({\n        cells: [Cell['default'].create({ number: 1 }), Cell['default'].create({ number: 1 }), Cell['default'].create({ number: 1 }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null })]\n      });\n\n      var result = constraint.validate();\n      chai.assert.isObject(result);\n      chai.expect(result.get(\"valid\")).to.be[\"false\"];\n    });\n\n    mocha.it(\"ShouldHaveAllValuesConstraint.validate() fails for non all values\", function () {\n      var constraint = ShouldHaveAllValuesConstraint['default'].create({\n        cells: [Cell['default'].create({ number: 1 }), Cell['default'].create({ number: 2 }), Cell['default'].create({ number: 3 }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null }), Cell['default'].create({ number: null })]\n      });\n\n      var result = constraint.validate();\n      chai.assert.isObject(result);\n      chai.expect(result.get(\"valid\")).to.be[\"false\"];\n    });\n\n    mocha.it(\"ShouldHaveAllValuesConstraint.validate() pass for unique all values\", function () {\n      var constraint = ShouldHaveAllValuesConstraint['default'].create({\n        cells: [Cell['default'].create({ number: 1 }), Cell['default'].create({ number: 2 }), Cell['default'].create({ number: 3 }), Cell['default'].create({ number: 4 }), Cell['default'].create({ number: 5 }), Cell['default'].create({ number: 6 }), Cell['default'].create({ number: 7 }), Cell['default'].create({ number: 8 }), Cell['default'].create({ number: 9 })]\n      });\n\n      var result = constraint.validate();\n      chai.assert.isObject(result);\n      chai.expect(result.get(\"valid\")).to.be[\"true\"];\n    });\n  });\n\n});","define('sudoku/tests/unit/constraints/should-have-all-values-test.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - unit/constraints/should-have-all-values-test.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'unit/constraints/should-have-all-values-test.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/unit/controllers/game/start-test', ['chai', 'ember-mocha'], function (chai, ember_mocha) {\n\n  'use strict';\n\n  /* jshint expr:true */\n  ember_mocha.describeModule(\"controller:game/start\", \"GameStartController\", {}, function () {\n    // Replace this with your real tests.\n    ember_mocha.it(\"exists\", function () {\n      var controller = this.subject();\n      chai.expect(controller).to.be.ok;\n    });\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('sudoku/tests/unit/controllers/game/start-test.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - unit/controllers/game/start-test.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'unit/controllers/game/start-test.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/unit/models/board-test', ['chai', 'mocha', 'sudoku/models/board', 'sudoku/models/cell'], function (chai, mocha, Board, Cell) {\n\n  'use strict';\n\n  /* jshint expr:true */\n  mocha.describe(\"Board\", function () {\n    mocha.it(\"Board.create() returns board with cells & blocks\", function () {\n      var board = Board['default'].create();\n\n      chai.expect(board).to.be.ok;\n      chai.assert.isArray(board.cells);\n      chai.expect(board.cells.length).to.be.equal(81);\n\n      board.cells.forEach(function (cell) {\n        chai.expect(cell).to.be.ok;\n        chai.assert.isNumber(cell.x);\n        chai.assert.isNumber(cell.y);\n      });\n\n      chai.expect(board.blocks.length).to.be.equal(9);\n    });\n\n    mocha.it(\"Board.blockCellsFor() returns array with correct cells for valid relative cell\", function () {\n      var board = Board['default'].create();\n      var testCases = [{\n        relativeCell: Cell['default'].create({ x: 0, y: 0 }),\n        blockCells: [Cell['default'].create({ x: 0, y: 0 }), Cell['default'].create({ x: 0, y: 1 }), Cell['default'].create({ x: 0, y: 2 }), Cell['default'].create({ x: 1, y: 0 }), Cell['default'].create({ x: 1, y: 1 }), Cell['default'].create({ x: 1, y: 2 }), Cell['default'].create({ x: 2, y: 0 }), Cell['default'].create({ x: 2, y: 1 }), Cell['default'].create({ x: 2, y: 2 })]\n      }, {\n        relativeCell: Cell['default'].create({ x: 2, y: 2 }),\n        blockCells: [Cell['default'].create({ x: 0, y: 0 }), Cell['default'].create({ x: 0, y: 1 }), Cell['default'].create({ x: 0, y: 2 }), Cell['default'].create({ x: 1, y: 0 }), Cell['default'].create({ x: 1, y: 1 }), Cell['default'].create({ x: 1, y: 2 }), Cell['default'].create({ x: 2, y: 0 }), Cell['default'].create({ x: 2, y: 1 }), Cell['default'].create({ x: 2, y: 2 })]\n      }, {\n        relativeCell: Cell['default'].create({ x: 4, y: 4 }),\n        blockCells: [Cell['default'].create({ x: 3, y: 3 }), Cell['default'].create({ x: 3, y: 4 }), Cell['default'].create({ x: 3, y: 5 }), Cell['default'].create({ x: 4, y: 3 }), Cell['default'].create({ x: 4, y: 4 }), Cell['default'].create({ x: 4, y: 5 }), Cell['default'].create({ x: 5, y: 3 }), Cell['default'].create({ x: 5, y: 4 }), Cell['default'].create({ x: 5, y: 5 })]\n      }, {\n        relativeCell: Cell['default'].create({ x: 6, y: 6 }),\n        blockCells: [Cell['default'].create({ x: 6, y: 6 }), Cell['default'].create({ x: 6, y: 7 }), Cell['default'].create({ x: 6, y: 8 }), Cell['default'].create({ x: 7, y: 6 }), Cell['default'].create({ x: 7, y: 7 }), Cell['default'].create({ x: 7, y: 8 }), Cell['default'].create({ x: 8, y: 6 }), Cell['default'].create({ x: 8, y: 7 }), Cell['default'].create({ x: 8, y: 8 })]\n      }, {\n        relativeCell: Cell['default'].create({ x: 8, y: 8 }),\n        blockCells: [Cell['default'].create({ x: 6, y: 6 }), Cell['default'].create({ x: 6, y: 7 }), Cell['default'].create({ x: 6, y: 8 }), Cell['default'].create({ x: 7, y: 6 }), Cell['default'].create({ x: 7, y: 7 }), Cell['default'].create({ x: 7, y: 8 }), Cell['default'].create({ x: 8, y: 6 }), Cell['default'].create({ x: 8, y: 7 }), Cell['default'].create({ x: 8, y: 8 })]\n      }, {\n        relativeCell: Cell['default'].create({ x: 0, y: 8 }),\n        blockCells: [Cell['default'].create({ x: 0, y: 6 }), Cell['default'].create({ x: 0, y: 7 }), Cell['default'].create({ x: 0, y: 8 }), Cell['default'].create({ x: 1, y: 6 }), Cell['default'].create({ x: 1, y: 7 }), Cell['default'].create({ x: 1, y: 8 }), Cell['default'].create({ x: 2, y: 6 }), Cell['default'].create({ x: 2, y: 7 }), Cell['default'].create({ x: 2, y: 8 })]\n      }, {\n        relativeCell: Cell['default'].create({ x: 6, y: 2 }),\n        blockCells: [Cell['default'].create({ x: 6, y: 0 }), Cell['default'].create({ x: 6, y: 1 }), Cell['default'].create({ x: 6, y: 2 }), Cell['default'].create({ x: 7, y: 0 }), Cell['default'].create({ x: 7, y: 1 }), Cell['default'].create({ x: 7, y: 2 }), Cell['default'].create({ x: 8, y: 0 }), Cell['default'].create({ x: 8, y: 1 }), Cell['default'].create({ x: 8, y: 2 })]\n      }];\n\n      testCases.forEach(function (testCase) {\n        var blockCells = board.blockCellsFor(testCase.relativeCell);\n        chai.expect(blockCells.length).to.be.equal(testCase.blockCells.length).and.to.be.equal(9);\n\n        blockCells.forEach(function (blockCell) {\n          chai.expect(testCase.blockCells.find(function (testCaseBlockCell) {\n            return testCaseBlockCell.isSame(blockCell);\n          })).to.be.ok;\n        });\n      });\n    });\n\n    mocha.it(\"Board.rows() returns array\", function () {\n      var rows = Board['default'].create().get(\"rows\");\n\n      chai.assert.isArray(rows);\n      chai.expect(rows.length).to.be.equal(9);\n\n      rows.forEach(function (row) {\n        chai.assert.isArray(row);\n        chai.expect(row.length).to.be.equal(9);\n      });\n    });\n\n    mocha.it(\"Board.columns() returns array\", function () {\n      var columns = Board['default'].create().get(\"columns\");\n\n      chai.assert.isArray(columns);\n      chai.expect(columns.length).to.be.equal(9);\n\n      columns.forEach(function (column) {\n        chai.assert.isArray(column);\n        chai.expect(column.length).to.be.equal(9);\n      });\n    });\n\n    mocha.it(\"Board.blockCellsFor() returns empty array for invalid relative cell\", function () {\n      var board = Board['default'].create();\n      var relativeCell = Cell['default'].create({\n        x: 100,\n        y: 100\n      });\n      var row = board.rowCellsFor(relativeCell);\n\n      chai.assert.isArray(row);\n      chai.expect(row.length).to.be.equal(0);\n    });\n\n    mocha.it(\"Board.rowCellsFor() returns array with correct cells for valid relative cell\", function () {\n      var board = Board['default'].create();\n      var relativeCell = Cell['default'].create({\n        x: 0,\n        y: 0\n      });\n      var row = board.rowCellsFor(relativeCell);\n\n      chai.assert.isArray(row);\n      chai.expect(row.length).to.be.equal(9);\n\n      row.forEach(function (cell) {\n        chai.expect(cell.x).to.be.equal(relativeCell.x);\n      });\n    });\n\n    mocha.it(\"Board.rowCellsFor() returns empty array for invalid relative cell\", function () {\n      var board = Board['default'].create();\n      var relativeCell = Cell['default'].create({\n        x: 100,\n        y: 100\n      });\n      var row = board.rowCellsFor(relativeCell);\n\n      chai.assert.isArray(row);\n      chai.expect(row.length).to.be.equal(0);\n    });\n\n    mocha.it(\"Board.columnCellsFor() for valid relative cell\", function () {\n      var board = Board['default'].create();\n      var relativeCell = Cell['default'].create({\n        x: 8,\n        y: 8\n      });\n      var row = board.columnCellsFor(relativeCell);\n\n      chai.assert.isArray(row);\n      chai.expect(row.length).to.be.equal(9);\n\n      row.forEach(function (cell) {\n        chai.expect(cell.y).to.be.equal(relativeCell.y);\n      });\n    });\n\n    mocha.it(\"Board.columnCellsFor() for invalid relative cell\", function () {\n      var board = Board['default'].create();\n      var relativeCell = Cell['default'].create({\n        x: 100,\n        y: 100\n      });\n      var row = board.columnCellsFor(relativeCell);\n\n      chai.assert.isArray(row);\n      chai.expect(row.length).to.be.equal(0);\n    });\n\n    mocha.it(\"Board.cellLeftFor() valid case\", function () {\n      var board = Board['default'].create();\n      var relativeCell = Cell['default'].create({\n        x: 4,\n        y: 4\n      });\n      var cell = board.cellLeftFor(relativeCell);\n\n      chai.expect(cell).to.be.ok;\n      chai.expect(cell.x).to.be.equal(relativeCell.x);\n      chai.expect(cell.y).to.be.equal(relativeCell.y - 1);\n    });\n\n    mocha.it(\"Board.cellLeftFor() edge case\", function () {\n      var board = Board['default'].create();\n      var relativeCell = Cell['default'].create({\n        x: 0,\n        y: 0\n      });\n      var cell = board.cellLeftFor(relativeCell);\n\n      chai.assert.isUndefined(cell);\n    });\n\n    mocha.it(\"Board.cellUpFor() valid case\", function () {\n      var board = Board['default'].create();\n      var relativeCell = Cell['default'].create({\n        x: 4,\n        y: 4\n      });\n      var cell = board.cellUpFor(relativeCell);\n\n      chai.expect(cell).to.be.ok;\n      chai.expect(cell.x).to.be.equal(relativeCell.x - 1);\n      chai.expect(cell.y).to.be.equal(relativeCell.y);\n    });\n\n    mocha.it(\"Board.cellUpFor() edge case\", function () {\n      var board = Board['default'].create();\n      var relativeCell = Cell['default'].create({\n        x: 0,\n        y: 0\n      });\n      var cell = board.cellUpFor(relativeCell);\n\n      chai.assert.isUndefined(cell);\n    });\n\n    mocha.it(\"Board.cellRightFor() valid case\", function () {\n      var board = Board['default'].create();\n      var relativeCell = Cell['default'].create({\n        x: 4,\n        y: 4\n      });\n      var cell = board.cellRightFor(relativeCell);\n\n      chai.expect(cell).to.be.ok;\n      chai.expect(cell.x).to.be.equal(relativeCell.x);\n      chai.expect(cell.y).to.be.equal(relativeCell.y + 1);\n    });\n\n    mocha.it(\"Board.cellRightFor() edge case\", function () {\n      var board = Board['default'].create();\n      var relativeCell = Cell['default'].create({\n        x: 0,\n        y: 8\n      });\n      var cell = board.cellRightFor(relativeCell);\n\n      chai.assert.isUndefined(cell);\n    });\n\n    mocha.it(\"Board.cellDownFor() valid case\", function () {\n      var board = Board['default'].create();\n      var relativeCell = Cell['default'].create({\n        x: 4,\n        y: 4\n      });\n      var cell = board.cellDownFor(relativeCell);\n\n      chai.expect(cell).to.be.ok;\n      chai.expect(cell.x).to.be.equal(relativeCell.x + 1);\n      chai.expect(cell.y).to.be.equal(relativeCell.y);\n    });\n\n    mocha.it(\"Board.cellDownFor() edge case\", function () {\n      var board = Board['default'].create();\n      var relativeCell = Cell['default'].create({\n        x: 8,\n        y: 8\n      });\n      var cell = board.cellDownFor(relativeCell);\n\n      chai.assert.isUndefined(cell);\n    });\n\n    mocha.it(\"Board.cellAt() valid case\", function () {\n      var board = Board['default'].create();\n      var x = 4;\n      var y = 4;\n      var cell = board.cellAt(x, y);\n\n      chai.expect(cell).to.be.ok;\n      chai.expect(cell.x).to.be.equal(x);\n      chai.expect(cell.y).to.be.equal(y);\n    });\n\n    mocha.it(\"Board.cellAt() edge case\", function () {\n      var board = Board['default'].create();\n      var cell = board.cellAt(100, 100);\n\n      chai.assert.isUndefined(cell);\n    });\n  });\n\n});","define('sudoku/tests/unit/models/board-test.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - unit/models/board-test.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'unit/models/board-test.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/unit/models/cell-test', ['chai', 'mocha', 'sudoku/models/cell'], function (chai, mocha, Cell) {\n\n  'use strict';\n\n  /* jshint expr:true */\n  mocha.describe(\"Cell\", function () {\n    mocha.it(\"Cell.isSame() with valid cell\", function () {\n      var cell = Cell['default'].create({\n        x: 0,\n        y: 0\n      });\n\n      var relativeCell = Cell['default'].create({\n        x: 0,\n        y: 0\n      });\n\n      chai.expect(cell.isSame(relativeCell)).to.be[\"true\"];\n    });\n\n    mocha.it(\"Cell.isSame() with invalid cell\", function () {\n      var cell = Cell['default'].create({\n        x: 0,\n        y: 0\n      });\n\n      var relativeCell = Cell['default'].create({\n        x: 1,\n        y: 1\n      });\n\n      chai.expect(cell.isSame(relativeCell)).to.be[\"false\"];\n    });\n\n    mocha.it(\"Cell.isInRowWith() with valid cell\", function () {\n      var cell = Cell['default'].create({\n        x: 0,\n        y: 0\n      });\n\n      var relativeCell = Cell['default'].create({\n        x: 0,\n        y: 1\n      });\n\n      chai.expect(cell.isInRowWith(relativeCell)).to.be[\"true\"];\n    });\n\n    mocha.it(\"Cell.isInRowWith() with invalid cell\", function () {\n      var cell = Cell['default'].create({\n        x: 0,\n        y: 0\n      });\n\n      var relativeCell = Cell['default'].create({\n        x: 1,\n        y: 1\n      });\n\n      chai.expect(cell.isInRowWith(relativeCell)).to.be[\"false\"];\n    });\n\n    mocha.it(\"Cell.isInColumnWith() with valid cell\", function () {\n      var cell = Cell['default'].create({\n        x: 0,\n        y: 0\n      });\n\n      var relativeCell = Cell['default'].create({\n        x: 1,\n        y: 0\n      });\n\n      chai.expect(cell.isInColumnWith(relativeCell)).to.be[\"true\"];\n    });\n\n    mocha.it(\"Cell.isInColumnWith() with invalid cell\", function () {\n      var cell = Cell['default'].create({\n        x: 0,\n        y: 0\n      });\n\n      var relativeCell = Cell['default'].create({\n        x: 1,\n        y: 1\n      });\n\n      chai.expect(cell.isInColumnWith(relativeCell)).to.be[\"false\"];\n    });\n  });\n\n});","define('sudoku/tests/unit/models/cell-test.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - unit/models/cell-test.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'unit/models/cell-test.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/unit/routes/application-test', ['chai', 'ember-mocha'], function (chai, ember_mocha) {\n\n  'use strict';\n\n  /* jshint expr:true */\n  ember_mocha.describeModule(\"route:application\", \"ApplicationRoute\", {}, function () {\n    ember_mocha.it(\"exists\", function () {\n      var route = this.subject();\n      chai.expect(route).to.be.ok;\n    });\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('sudoku/tests/unit/routes/application-test.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - unit/routes/application-test.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'unit/routes/application-test.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/unit/routes/game/end-test', ['chai', 'ember-mocha'], function (chai, ember_mocha) {\n\n  'use strict';\n\n  /* jshint expr:true */\n  ember_mocha.describeModule(\"route:game/end\", \"GameEndRoute\", {}, function () {\n    ember_mocha.it(\"exists\", function () {\n      var route = this.subject();\n      chai.expect(route).to.be.ok;\n    });\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('sudoku/tests/unit/routes/game/end-test.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - unit/routes/game/end-test.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'unit/routes/game/end-test.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/unit/routes/game/index-test', ['chai', 'ember-mocha'], function (chai, ember_mocha) {\n\n  'use strict';\n\n  /* jshint expr:true */\n  ember_mocha.describeModule(\"route:game/index\", \"GameIndexRoute\", {}, function () {\n    ember_mocha.it(\"exists\", function () {\n      var route = this.subject();\n      chai.expect(route).to.be.ok;\n    });\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('sudoku/tests/unit/routes/game/index-test.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - unit/routes/game/index-test.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'unit/routes/game/index-test.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/unit/routes/game/start-test', ['chai', 'ember-mocha'], function (chai, ember_mocha) {\n\n  'use strict';\n\n  /* jshint expr:true */\n  ember_mocha.describeModule(\"route:game/start\", \"GameStartRoute\", {}, function () {\n    ember_mocha.it(\"exists\", function () {\n      var route = this.subject();\n      chai.expect(route).to.be.ok;\n    });\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('sudoku/tests/unit/routes/game/start-test.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - unit/routes/game/start-test.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'unit/routes/game/start-test.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/unit/services/board-factory-test', ['chai', 'ember-mocha', 'sudoku/models/cell'], function (chai, ember_mocha, Cell) {\n\n  'use strict';\n\n  /* jshint expr:true */\n  ember_mocha.describeModule(\"service:board-factory\", \"BoardFactoryService\", {}, function () {\n    ember_mocha.it(\"createBoard()\", function () {\n      var factory = this.subject();\n\n      chai.expect(factory).to.be.ok;\n      chai.expect(factory.createBoard).to.be[\"function\"];\n    });\n  });\n\n});","define('sudoku/tests/unit/services/board-factory-test.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - unit/services/board-factory-test.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'unit/services/board-factory-test.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/unit/services/board-validator-test', ['chai', 'ember-mocha'], function (chai, ember_mocha) {\n\n  'use strict';\n\n  /* jshint expr:true */\n  ember_mocha.describeModule(\"service:board-validator\", \"BoardValidatorService\", {\n    needs: [\"service:board-factory\"]\n  }, function () {\n\n    var assertCell = function assertCell(testedCell, board) {\n      var cell = board.cellAt(testedCell.get(\"x\"), testedCell.get(\"y\"));\n\n      chai.expect(cell).to.be.ok;\n      chai.expect(cell.get(\"number\")).to.be.eq(testedCell.get(\"number\"));\n    };\n\n    var createBoardFactoryService = function createBoardFactoryService(context) {\n      var cells = arguments[1] === undefined ? [] : arguments[1];\n\n      var boardFactoryService = context.container.lookup(\"service:board-factory\");\n\n      boardFactoryService.set(\"boardInitializerService\", {\n        initialize: function initialize(board) {\n          cells.forEach(function (cell) {\n            board.cellAt(cell.x, cell.y).set(\"number\", cell.number);\n          });\n\n          board.get(\"cells\").forEach(function (cell) {\n            if (null === cell.get(\"number\")) {\n              cell.set(\"isEnabled\", true);\n            }\n          });\n\n          return board;\n        }\n      });\n\n      return boardFactoryService;\n    };\n\n    ember_mocha.it(\"exists\", function () {\n      var boardFactoryService = createBoardFactoryService(this);\n      var board = boardFactoryService.createBoard();\n      var validator = this.subject();\n\n      chai.assert.isObject(validator);\n    });\n\n    ember_mocha.it(\"BoardValidatorService.validate() fails when 2 cells in row are duplicated\", function () {\n      var boardFactoryService = createBoardFactoryService(this);\n      var board = boardFactoryService.createBoard();\n      var validator = this.subject();\n      var cells = [board.cellAt(0, 0), board.cellAt(0, 8)];\n\n      cells.setEach(\"number\", 1);\n\n      var result = validator.validate(board);\n\n      chai.expect(result).to.be.ok;\n      chai.expect(result.get(\"valid\")).to.be[\"false\"];\n      chai.expect(result.get(\"invalidCells\").length).to.be.eq(2);\n\n      cells.forEach(function (cell) {\n        assertCell(cell, board);\n      });\n    });\n\n    ember_mocha.it(\"BoardValidatorService.validate() fails when 2 cells in column are duplicated\", function () {\n      var boardFactoryService = createBoardFactoryService(this);\n      var board = boardFactoryService.createBoard();\n      var validator = this.subject();\n      var cells = [board.cellAt(0, 0), board.cellAt(8, 0)];\n\n      cells.setEach(\"number\", 1);\n\n      var result = validator.validate(board);\n\n      chai.expect(result).to.be.ok;\n      chai.expect(result.get(\"valid\")).to.be[\"false\"];\n      chai.expect(result.get(\"invalidCells\").length).to.be.eq(2);\n\n      cells.forEach(function (cell) {\n        assertCell(cell, board);\n      });\n    });\n\n    ember_mocha.it(\"BoardValidatorService.validate() fails when 2 cells in block are duplicated\", function () {\n      var boardFactoryService = createBoardFactoryService(this);\n      var board = boardFactoryService.createBoard();\n      var validator = this.subject();\n      var cells = [board.cellAt(0, 0), board.cellAt(0, 1)];\n\n      cells.setEach(\"number\", 1);\n\n      var result = validator.validate(board);\n\n      chai.expect(result).to.be.ok;\n      chai.expect(result.get(\"valid\")).to.be[\"false\"];\n      chai.expect(result.get(\"invalidCells\").length).to.be.eq(2);\n\n      cells.forEach(function (cell) {\n        assertCell(cell, board);\n      });\n    });\n\n    ember_mocha.it(\"BoardValidatorService.validate() fails when 2 cells in row & 2 cells in column & 2 cells in block are duplicated\", function () {\n      var boardFactoryService = createBoardFactoryService(this);\n      var board = boardFactoryService.createBoard();\n      var validator = this.subject();\n      var cells = [\n      /**\n       * row: board.cellAt(0, 0) + board.cellAt(0, 8)\n       * column: board.cellAt(0, 0) + board.cellAt(8, 0)\n       * block: board.cellAt(0, 0) + board.cellAt(1, 1)\n       */\n      board.cellAt(0, 0), board.cellAt(0, 8), board.cellAt(8, 0), board.cellAt(1, 1)];\n\n      cells.setEach(\"number\", 1);\n      cells.setEach(\"number\", 1);\n\n      var result = validator.validate(board);\n\n      chai.expect(result).to.be.ok;\n      chai.expect(result.get(\"valid\")).to.be[\"false\"];\n      chai.expect(result.get(\"invalidCells\").length).to.be.eq(4);\n\n      cells.forEach(function (cell) {\n        assertCell(cell, board);\n      });\n    });\n\n    ember_mocha.it(\"BoardValidatorService.validate() fails when 2 cells in row & 2 cells in column & 2 cells in block are duplicated\", function () {\n      var boardFactoryService = createBoardFactoryService(this);\n      var board = boardFactoryService.createBoard();\n      var validator = this.subject();\n      var cells = [\n      /**\n       * row: board.cellAt(0, 0) + board.cellAt(0, 8)\n       * column: board.cellAt(0, 0) + board.cellAt(8, 0)\n       * block: board.cellAt(0, 0) + board.cellAt(1, 1)\n       */\n      board.cellAt(0, 0), board.cellAt(0, 8), board.cellAt(8, 0), board.cellAt(1, 1)];\n\n      cells.setEach(\"number\", 1);\n\n      var result = validator.validate(board);\n\n      chai.expect(result).to.be.ok;\n      chai.expect(result.get(\"valid\")).to.be[\"false\"];\n      chai.expect(result.get(\"invalidCells\").length).to.be.eq(4);\n\n      cells.forEach(function (cell) {\n        assertCell(cell, board);\n      });\n    });\n\n    ember_mocha.it(\"BoardValidatorService.validate() fails when board is initiliazed and inserted cell conflicts with preinserted ones in block\", function () {\n      var boardFactoryService = createBoardFactoryService(this, [\n      /**\n       * [ ][ ][ ]  [ ][ ][ ]  [ ][ ][ ]\n       * [ ][ ][ ]  [ ][ ][ ]  [ ][ ][ ]\n       * [ ][ ][ ]  [ ][ ][ ]  [ ][ ][ ]\n       *\n       * [ ][ ][ ]  [5][1][3]  [ ][ ][ ]\n       * [1][ ][ ]  [ ][ ][8]  [ ][ ][ ]\n       * [ ][ ][ ]  [9][7][ ]  [ ][ ][ ]\n       *\n       * [ ][ ][ ]  [1][ ][ ]  [ ][ ][ ]\n       * [ ][ ][ ]  [ ][ ][ ]  [ ][ ][ ]\n       * [ ][ ][ ]  [ ][ ][ ]  [ ][ ][ ]\n       */\n      { x: 3, y: 3, number: 5 }, { x: 3, y: 4, number: 1 }, { x: 3, y: 5, number: 3 }, { x: 4, y: 0, number: 1 }, { x: 4, y: 3, number: null }, { x: 4, y: 4, number: null }, { x: 4, y: 5, number: 8 }, { x: 5, y: 3, number: 9 }, { x: 5, y: 4, number: 7 }, { x: 5, y: 5, number: null }, { x: 6, y: 3, number: 1 }]);\n      var board = boardFactoryService.createBoard();\n      var validator = this.subject();\n\n      /**\n       * test case:\n       *\n       * [ ][ ][ ]  [ ][ ][ ]  [ ][ ][ ]\n       * [ ][ ][ ]  [ ][ ][ ]  [ ][ ][ ]\n       * [ ][ ][ ]  [ ][ ][ ]  [ ][ ][ ]\n       *\n       * [ ][ ][ ]  [5][1][3]  [ ][ ][ ]\n       * [1][ ][ ]  [1][ ][8]  [ ][ ][ ]\n       * [ ][ ][ ]  [9][7][ ]  [ ][ ][ ]\n       *\n       * [ ][ ][ ]  [1][ ][ ]  [ ][ ][ ]\n       * [ ][ ][ ]  [ ][ ][ ]  [ ][ ][ ]\n       * [ ][ ][ ]  [ ][ ][ ]  [ ][ ][ ]\n       */\n      board.cellAt(4, 3).set(\"number\", 1);\n\n      var result = validator.validate(board);\n\n      chai.expect(result).to.be.ok;\n      chai.expect(result.get(\"valid\")).to.be[\"false\"];\n      chai.expect(result.get(\"invalidCells\").length).to.be.eq(4);\n\n      result.get(\"invalidCells\").forEach(function (cell) {\n        assertCell(cell, board);\n      });\n    });\n  });\n\n});","define('sudoku/tests/unit/services/board-validator-test.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - unit/services/board-validator-test.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'unit/services/board-validator-test.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/tests/views/cell.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - views/cell.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'views/cell.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('sudoku/views/cell', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  var arrowCharCodes = [37, // left arrow\n  38, // up arrow\n  39, // right arrow\n  40 // down arrow\n  ];\n\n  var deleteCharCodes = [8, // backspace\n  46 // delete\n  ];\n\n  var numberCharCodes = [49, // 1\n  50, // 2\n  51, // 3\n  52, // 4\n  53, // 5\n  54, // 6\n  55, // 7\n  56, // 8\n  57 // 9\n  ];\n\n  exports['default'] = Ember['default'].View.extend({\n\n    templateName: \"cell\",\n    classNameBindings: [\":cell\", \"isActive:active\", \"isValid::invalid\", \"isEnabled:enabled:disabled\"],\n\n    isActive: (function () {\n      return this.get(\"cell.isActive\");\n    }).property(\"cell.isActive\"),\n\n    isValid: (function () {\n      return this.get(\"cell.isValid\");\n    }).property(\"cell.isValid\"),\n\n    isEnabled: (function () {\n      return this.get(\"cell.isEnabled\");\n    }).property(\"cell.isEnabled\"),\n\n    becomeFocused: (function () {\n      this.$().attr({ tabindex: 1 });\n      this.$().focus();\n    }).observes(\"cell.isActive\"),\n\n    eventManager: Ember['default'].Object.create({\n      mouseEnter: function mouseEnter(event, view) {\n        view.get(\"controller\").send(\"mouseEnter\", view.get(\"cell\"));\n      },\n\n      mouseLeave: function mouseLeave(event, view) {\n        view.get(\"controller\").send(\"mouseLeave\", view.get(\"cell\"));\n      },\n\n      click: function click(event, view) {\n        view.get(\"controller\").send(\"click\", view.get(\"cell\"));\n      },\n\n      keyDown: function keyDown(event, view) {\n        if (arrowCharCodes.contains(event.which)) {\n          event.preventDefault();\n          view.get(\"controller\").send(\"arrowPress\", view.get(\"cell\"), event);\n        }\n\n        if (deleteCharCodes.contains(event.which)) {\n          event.preventDefault();\n          view.get(\"controller\").send(\"deletePress\", view.get(\"cell\"));\n        }\n      },\n\n      keyPress: function keyPress(event, view) {\n        if (numberCharCodes.contains(event.which)) {\n          view.get(\"controller\").send(\"numberPress\", view.get(\"cell\"), Number.parseInt(String.fromCharCode(event.which)));\n        }\n      }\n    })\n\n  });\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('sudoku/config/environment', ['ember'], function(Ember) {\n  var prefix = 'sudoku';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"sudoku/tests/test-helper\");\n} else {\n  require(\"sudoku/app\")[\"default\"].create({\"name\":\"sudoku\",\"version\":\"0.0.0.21988076\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACljFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfzdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbhFA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"sudoku.js"}